{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/sher/lighthouse/postgrad/github-Finder/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport NavBar from './components/layout/NavBar';\nimport Users from './components/users/Users';\nimport User from './components/users/User';\nimport Search from './components/users/Search';\nimport Alert from './components/layout/Alert';\nimport './App.css';\nimport About from \"./components/pages/About\";\nimport axios from 'axios';\nimport GithubState from './context/gihub/GithubState';\n\nconst App = () => {\n  _s();\n\n  //initial states for users and loading\n  const [users, setUsers] = useState([]);\n  const [user, setUser] = useState({});\n  const [repos, setRepos] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [alert, setAlert] = useState(false); //search github users function that is passed to search file as props\n\n  const searchUsers = async text => {\n    setLoading(true); //fetches data from the github api\n\n    const res = await axios.get(`https://api.github.com/search/users?q=${text}&client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_ID}`); // //the state will be set as soon as the data is received.\n\n    setUsers(res.data.items);\n    setLoading(false);\n  }; //Get single github user using user's login name or username and the information will be passed as props to the user file\n\n\n  const getUser = async username => {\n    setLoading(true); //fetches data from the github api\n\n    const res = await axios.get(`https://api.github.com/users/${username}?client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_ID}`); // //the state will be set as soon as the data is received.\n\n    setUser(res.data);\n    setLoading(false);\n  }; // Get users repos\n\n\n  const getUserRepos = async username => {\n    setLoading(true); //fetches data from the github api\n\n    const res = await axios.get(`https://api.github.com/users/${username}/repos?per_page=5&sort=created:asc&client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_ID}`); // //the state will be set as soon as the data is received.\n\n    setRepos(res.data);\n    setLoading(false);\n  }; //clear users from state\n\n\n  const clearUsers = () => {\n    setUsers([]);\n    setLoading(false);\n  }; // set alert if nothing is typed\n\n\n  const showAlert = (msg, type) => {\n    setAlert({\n      msg: msg,\n      type: type\n    }); // Timeout to remove alert message after five seconds\n\n    setTimeout(() => setAlert(null), 5000);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(Alert, {\n          alert: alert\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Switch, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/\",\n            render: props => /*#__PURE__*/_jsxDEV(Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(Search, {\n                searchUsers: searchUsers,\n                clearUsers: clearUsers,\n                showClear: users.length > 0 ? true : false,\n                setAlert: showAlert\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Users, {\n                loading: loading,\n                users: users\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/about\",\n            component: About\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/user/:login\",\n            render: props => /*#__PURE__*/_jsxDEV(User, { ...props,\n              getUser: getUser,\n              getUserRepos: getUserRepos,\n              user: user,\n              repos: repos,\n              loading: loading\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 7\n  }, this);\n};\n\n_s(App, \"6y4HB4Y+RvapiVeLwalDjUYb1T8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/sher/lighthouse/postgrad/github-Finder/src/App.js"],"names":["React","Fragment","useState","BrowserRouter","Router","Switch","Route","NavBar","Users","User","Search","Alert","About","axios","GithubState","App","users","setUsers","user","setUser","repos","setRepos","loading","setLoading","alert","setAlert","searchUsers","text","res","get","process","env","REACT_APP_GITHUB_CLIENT_ID","data","items","getUser","username","getUserRepos","clearUsers","showAlert","msg","type","setTimeout","props","length"],"mappings":"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","sourcesContent":["import React, { Fragment, useState } from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport NavBar from './components/layout/NavBar'\nimport Users from './components/users/Users'\nimport User from './components/users/User'\nimport Search from './components/users/Search'\nimport Alert from './components/layout/Alert'\nimport './App.css';\nimport About from \"./components/pages/About\"\nimport axios from 'axios'\n\nimport GithubState from './context/gihub/GithubState'\n\nconst App = () => {\n\n  //initial states for users and loading\n  const [users, setUsers] = useState([]);\n  const [user, setUser] = useState({});\n  const [repos, setRepos] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [alert, setAlert] = useState(false);\n\n  //search github users function that is passed to search file as props\n  const searchUsers = async (text) => {\n\n    setLoading(true);\n    //fetches data from the github api\n    const res = await axios.get(`https://api.github.com/search/users?q=${text}&client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_ID}`);\n    \n    // //the state will be set as soon as the data is received.\n    setUsers(res.data.items)\n    setLoading(false)\n  };\n\n  //Get single github user using user's login name or username and the information will be passed as props to the user file\n  const getUser = async (username) => {\n    setLoading(true);\n    //fetches data from the github api\n    const res = await axios.get(`https://api.github.com/users/${username}?client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_ID}`);\n    \n    // //the state will be set as soon as the data is received.\n    setUser(res.data);\n    setLoading(false);\n  } \n\n  // Get users repos\n  const getUserRepos = async (username) => {\n    setLoading(true);\n    //fetches data from the github api\n    const res = await axios.get(`https://api.github.com/users/${username}/repos?per_page=5&sort=created:asc&client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_ID}`);\n    \n    // //the state will be set as soon as the data is received.\n    setRepos(res.data);\n    setLoading(false);\n  } \n\n  //clear users from state\n  const clearUsers = () => {\n    setUsers([]);\n    setLoading(false);\n  }\n\n  // set alert if nothing is typed\n  const showAlert = (msg, type) => {\n    setAlert({msg:msg, type:type})\n    // Timeout to remove alert message after five seconds\n    setTimeout(() => setAlert(null), 5000);\n  }\n\n    return (\n      <Router>\n      <div className=\"App\">\n        <NavBar />\n        <div className=\"container\">\n          <Alert alert={alert} />\n          <Switch>\n            <Route exact path='/' render={props => (\n              <Fragment>\n                <Search searchUsers={searchUsers} clearUsers={clearUsers} showClear={users.length > 0 ? true: false} setAlert={showAlert}/>\n                <Users loading={loading} users={users} />\n              </Fragment>\n                \n            )} \n          />\n          <Route exact path=\"/about\" component={About}></Route>\n          <Route exact path='/user/:login' render={props => (\n            <User {...props} getUser={getUser} getUserRepos={getUserRepos} user={user} repos={repos} loading={loading}/>\n          )} />\n        </Switch>\n        </div>\n      </div>\n  \n    </Router>\n    );\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}